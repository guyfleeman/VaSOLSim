import groovy.io.FileType

ext.sourceCompatibility = 1.7
ext.targetCompatibility = 1.8
version = '0.5.0a'

task wrapper(type: Wrapper) {
    gradleVersion = '1.4'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
}

subprojects {
    repositories {
        mavenCentral()
    }

    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.11'

        /*
         * commons lang
         * commons io
         * log4j
         * javamail
         * findbugs
         */
        compile('org.apache.commons:commons-lang3:3.3.2',
        'commons-io:commons-io:2.4',
        'log4j:log4j:1.2.17',
        'javax.mail:mail:1.4.7',
        'com.google.code.findbugs:jsr305:3.0.0')
    }
}

private int getLines(File file) {
    int index = 0;
    file.eachLine {
        index++;
    }
    return index;
}

task size << {
    def filesGradle = 0
    def filesJava   = 0
    def filesCSS    = 0
    def filesXML    = 0
    def linesGradle = 0
    def linesJava   = 0
    def linesCSS    = 0
    def linesXML    = 0

    def dir = new File('.')
    def list = []
    dir.eachFileRecurse (FileType.ANY) { file ->
        if (file.toString().contains('.git')
                || (file.toString().contains('build') && !file.name.contains('build'))) {
            return
        }

        if (file.isFile()) {
            list << file
        }
    }

    list.each {
        if (it.name.matches('.*\\.java')) {
            filesJava++
            linesJava += getLines(it)
        }
        else if (it.name.matches('.*\\.css')) {
            filesCSS++
            linesCSS += getLines(it)
        }
        else if (it.name.matches('.*\\.xml')) {
            filesXML++
            linesXML += getLines(it)
        }
        else if (it.name.matches('.*\\.gradle')) {
            filesGradle++
            linesGradle += getLines(it)
        }
    }

    println "Lines Gradle: " + linesGradle
    println "Lines Java: " + linesJava
    println "Lines CSS: " + linesCSS
    println "Lines XML: " + linesXML
    println "Lines Total: " + (linesGradle + linesJava + linesCSS + linesXML)
}

project(':vss-common') {
    dependencies {
        compile('org.apache.pdfbox:pdfbox:1.8.4',
        'commons-codec:commons-codec:1.9')
    }
}

project(':vss-studentclient') {
    apply from: 'http://dl.bintray.com/content/shemnon/javafx-gradle/0.3.0/javafx.plugin'

    dependencies {
        compile project(':vss-common')
    }

    ext.mainClassName = 'main.java.vasolsim.sclient.StudentClient'
    ext.applicationDefaultJvmArgs = ['-Dgreeting.language=en', '-Xms512m', '-Xmx2048m']

    /*
     * lean jar and javafx deploy
     */
    javafx {
        appID = 'vss-sc'
        appName = 'VSS Student Client'

        mainClass = 'main.java.vasolsim.sclient.StudentClient'

        //jvm arguments, application command line arguments
        jvmArgs = ['-Dgreeting.language=en', '-Xms512m', '-Xmx2048m']
        arguments = ['--disable-dep-check']
    }

    /*
     * fatJar build
     */
    task fatJar(type: Jar) {
        appendix = 'fat'
        from sourceSets.main.output
        from {
            configurations.compile.collect {
                it.isDirectory() ? it : zipTree(it)
            }
        }

        manifest {
            attributes 'Main-Class': mainClassName
        }
    }
}

project('vss-teacherclient') {
    apply from: 'http://dl.bintray.com/content/shemnon/javafx-gradle/0.3.0/javafx.plugin'

    dependencies {
        compile project(':vss-common')
    }

    ext.mainClassName = 'main.java.vasolsim.tclient.TeacherClient'
    ext.applicationDefaultJvmArgs = ['-Dgreeting.language=en', '-Xms512m', '-Xmx2048m']

    /*
     * javafx deploy
     */
    javafx {
        appID = 'vss-tc'
        appName = 'VSS Teacher Client'

        mainClass = 'main.java.vasolsim.tclient.TeacherClient'

        //jvm arguments, application command line arguments
        jvmArgs = ['-Dgreeting.language=en', '-Xms512m', '-Xmx2048m']
        arguments = ['--disable-dep-check']
    }

    /*
     * fatJar build
     */
    task fatJar(type: Jar) {
        appendix = 'fat'
        from sourceSets.main.output
        from {
            configurations.compile.collect {
                it.isDirectory() ? it : zipTree(it)
            }
        }

        manifest {
            attributes 'Main-Class': mainClassName
        }
    }
}
